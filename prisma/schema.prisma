datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String @id @default(cuid())
  name          String?
  username      String @unique
  surname       String?
  email         String? @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  completedOnboarding Boolean @default(false)
  accounts      Account[]
  sessions      Session[]
  createdWorkspaces Workspace[] @relation("CreatedBy")
  subscriptions Subscription[]
  useCase UseCase?
  createdTasks Task[] @relation("TaskCreatedByUser")
  updatedTasks Task[] @relation("TaskUpdatedByUser")
  savedTask savedTask[]
  assignedToTask assignedToTask[]
  createdMindMaps MindMap[] @relation("MindMapCreatedByUser")
  updatedMindMaps MindMap[] @relation("MindMapUpdatedByUser")
  savedMindMaps savedMindMaps[]
  assignedToMindMap assignedToMindMap[]
  messages Message[]
  userNotifications Notification[] @relation("NotifyUser")
  userCreatedNotifications Notification[] @relation("NotifyCreator")
}
 
model Account {
  id                String @id @default(cuid())
  userId            String @unique
  type              String
  provider          String
  providerAccountId String @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  @@id([userId, credentialID])
}

enum UseCase {
  WORK
  STUDY
  PERSONAL_USE
}

enum UserPermission {
  ADMIN
  CAN_EDIT
  READ_ONLY
  OWNER
}

model Subscription {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  workspace Workspace @relation(fields: [workspaceId],references: [id], onDelete: Cascade)
  workspaceId String
  userRole UserPermission @default(READ_ONLY)

  @@id([userId, workspaceId])
}

model Workspace {
  id String @id @default(cuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId String?
  Creator User? @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  subscribers Subscription[]
  image String?
  color CustomColors @default(BLUE)
  inviteCode String @unique 
  adminCode String @unique 
  canEditCode String @unique 
  readOnlyCode String @unique 
  tasks Task[]
  tags Tag[]
  mindMaps MindMap[]
  conversation Conversation?
  notification Notification[]
}

enum CustomColors {
  PURPLE
  RED
  GREEN
  BLUE
  PINK
  YELLOW
  ORANGE
  CYAN
  LIME
  EMERALD
  INDIGO
  FUCHSIA
}


model Task {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy User? @relation(name: "TaskUpdatedByUser",fields: [updatedUserId], references: [id], onDelete: Cascade)
  updatedUserId String?
  creator User @relation(name: "TaskCreatedByUser",fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  workspace Workspace @relation(fields: [workspaceId],references: [id], onDelete: Cascade)
  workspaceId String
  title String
  emoji String @default("1f9e0")
  content Json?
  tags Tag[]
  taskDate TaskDate? @relation(fields: [dateId],references: [id], onDelete: Cascade)
  dateId String?
  savedTask savedTask[]
  assignedToTask assignedToTask[]
}

model savedTask {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  task Task @relation(fields: [taskId] ,references: [id], onDelete: Cascade)
  taskId String
}

model assignedToTask {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  task Task @relation(fields: [taskId],references: [id], onDelete: Cascade)
  taskId String
}


model Tag {
  id String @id @default(cuid())
  name String
  tasks Task[]
  color CustomColors
  workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  mindMaps MindMap[]
}

model TaskDate {
  id String @id @default(cuid())
  from String?
  to String?
  Task Task[]
}

model MindMap {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy User? @relation(name: "MindMapUpdatedByUser", fields: [updatedUserId], references: [id], onDelete: Cascade)
  creator User @relation(name: "MindMapCreatedByUser", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  updatedUserId String?
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  content Json?
  title String
  emoji String @default("1f9e0")
  tags Tag[]
  savedMindMaps savedMindMaps[]
  assignedToMindMap assignedToMindMap[]

  @@index([workspaceId])
  @@index([updatedUserId])
  @@index([creatorId])
}

model assignedToMindMap {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  mindMap MindMap @relation(fields: [mindMapId],references: [id], onDelete: Cascade)
  mindMapId String
}

model savedMindMaps {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  mindMap MindMap @relation(fields: [mindMapId], references: [id], onDelete: Cascade)
  mindMapId String
}

model Conversation {
  id String @id @default(cuid())
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String @unique
  messages Message[]
}

model Message {
  id String @id @default(cuid())
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String
  content String
  createdAt DateTime @default(now())
  additionalResources additionalResource[]
  edited Boolean @default(false)
  updatedAt DateTime? @updatedAt
}

model additionalResource{
  id String @id @default(cuid())

  message Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String?
  type AdditionalResourceTypes
  name String
  url String
}

enum AdditionalResourceTypes {
  PDF
  IMAGE
}

enum NotifyType {
  NEW_USER_IN_WORKSPACE
  USER_LEFT_WORKSPACE
  NEW_TASK
  NEW_MIND_MAP
  NEW_ROLE
  NEW_ASSIGNMENT_TASK
  NEW_ASSIGNMENT_MIND_MAP
}

model Notification {
  id String @id @default(cuid())
  user User @relation(name: "NotifyUser", fields: [userId], references: [id] , onDelete: Cascade)
  userId String
  notifyCreator User @relation(name: "NotifyCreator", fields: [notifyCreatorId], references: [id], onDelete: Cascade)
  notifyCreatorId String
  workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  seen Boolean @default(false)
  clicked Boolean @default(false)
  createdDate DateTime @default(now())
  notifyType NotifyType
  newUserRole UserPermission?
  taskId String?
  mindMapId String?
}