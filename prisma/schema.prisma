datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String @id @default(cuid())
  name          String?
  username      String @unique
  surname       String?
  email         String? @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  completedOnboarding Boolean @default(false)
  accounts      Account[]
  sessions      Session[]
}
 
model Account {
  id                String @id @default(cuid())
  userId            String @unique
  type              String
  provider          String
  providerAccountId String @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  @@id([userId, credentialID])
}

enum UseCase {
  WORK
  STUDY
  PERSONAL_USE
}